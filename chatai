#!/bin/sh
#set -x
# chatai - Start an interactive chat session with Googles Gemini AI or Anthropics Claude on Asuswrt-Merlin based routers
#
#

readonly PROGNAME=chatai
readonly PROGDIR=/jffs/scripts
readonly SCRIPTDIR=/jffs/addons/$PROGNAME
readonly SCRIPTLOGDIR=/jffs/addons/$PROGNAME/logs
readonly CONFIG=$PROGNAME.conf
readonly VERSION=0.3.1


# text formatting

readonly BOLD="\\e[1m"
readonly BOLDBLUE="${BOLD}\\e[34m"
readonly BOLDCYAN="${BOLD}\\e[36m"
readonly ERROR="\\e[31m"
readonly CLEARFORMAT="\\e[0m"

# Debug and various flags

debug=0		# set to 1 for verbose output
logchat=0	# log the session or not
debughtml=0	# save html info
watchlogs=0
analyze=0	# analyze file mode
whichone=9	# default AI bot

AIRESP="/tmp/chatai.tmp"

# Worker functions

showhelp() {
	printf "\\nchatai (Ver $VERSION) - start an interactive chat session with Googles Gemini or Anthropics Claude AI\\n"
	printf "\\nUsage: chatai [gemini|claude|both] [analyze filename] [log] [show] [help] [install] [uninstall] [update]\\n\\n"
	printf "\\tgemini - use Googles Gemini for chat (default)\\n"
	printf "\\tclaude - use Anthropics Claude for chat\\n"
	printf "\\tboth - use both AI and display the results in different color output\\n"
	printf "\\tanalyze filename - analyze the suppled filename contents\\n"
	printf "\\tlog - log the session for later viewing\\n"
	printf "\\tshow - show all the saved chat log sessions\\n"
	printf "\\thelp - show this message\\n"
	printf "\\tinstall - install chatai and create addon dir and config file\\n"
	printf "\\tuninstall - remove chatai and its directory, chatlogs and config file\\n"
	printf "\\tupdate - check for and optionally update $PROGRAME\\n"
	printf "\\n"	
}

dprint() {
	if [ $debug = 1 ]; then
		printf "\\n%s\\n" "$1"
	fi
}

waitsome() {
	if [ $1 = 1 ]; then
		printf "\\nPress Enter to Continue..."
		read -r
	fi
}


checkexit() {
         if $(read -r -t $SLDELAY); then
            	printf "\\n"
		cleanupfiles
		exit
        fi
}

doinstall() {


# check for entware, bail if not there


	if [ ! -x /opt/bin/opkg ]; then
		printf "\\nEntware not deteted (and needed)\\n"
		printf "Install using AMTM and try again.\\n"
		exit 1
	fi

	printf "\\nInstall $PROGNAME\\n"
	printf "\\nAre you sure you want to install $PROGNAME and it's required apps (fold and jq) and config file (Y|N) ?"
	read -r answr
	case $answr in
		Y|y)
			printf "\\nInstalling..."
			;;
			N|n)
				printf "\\nOk, not installing\\n"
				exit
			;;
			*)
				printf "Enter either Y or N...exiting\\n"
				exit
			;;
	esac

# make sure it was downloaded to the correct place

	if [ ! -f /jffs/scripts/$PROGNAME ]; then
		cp ./$PROGNAME.sh /jffs/scripts/$PROGNAME
		rm -f ./$PROGNAME.sh
	fi


	printf "\\n\\nChecking for help apps..."

# check for required helper apps

	if [ ! -x /opt/bin/fold ] || [ ! -x /opt/bin/jq ]; then
		printf "\\nThe applications fold and jq are needed.\\n"
		printf "   Check and install now (Y|N) ? "
		read -r answr
		case $answr in
			Y|y)
				printf "\\nInstalling..."
				/opt/bin/opkg update
				if [ ! -x /opt/bin/fold ]; then
					/opt/bin/opkg install coreutils-fold
					if [ ! -x /opt/bin/fold ]; then
						printf "\\nError - can't seem to install fold...\\n"
						printf "   Exiting\\n"
						exit 1
					fi
				fi
				if [ ! -x /opt/bin/jq ]; then
					/opt/bin/opkg install jq
					if [ ! -x /opt/bin/jq ]; then
						printf "\\nError - can't seem to install jq...\\n"
						printf "   Exiting\\n"
						exit 1
					fi
				fi
				printf "\\nSuccess\\n"
			;;
			N|n)
				printf "This scripts requires fold and jq...exiting\\n"
				exit 1
			;;
			*)
				printf "Enter either Y or N...exiting\\n"
				exit 1
			;;
		esac
	fi

# setup addon dir and config file

	printf "ok done.\\n\\nCreating and setting up $SCRIPTDIR\\n"

	mkdir -p $SCRIPTDIR


cat <<EOF > $SCRIPTDIR/$CONFIG
#
# $PROGNAME conf file
#

GAPI_KEY="PutYourGeminiAPIKeyHere"          # Put Google Gemini API key here ;-)
CAPI_KEY="PutYourClaudeAPIKeyHere"          # Put Anthropics Claude API key here ;-)
WHICHAI="0"			    	    # which ai bot - 0: Gemini 1: Claude  2: both
LOGDIR="$SCRIPTDIR/logs"                    # location to store chat log sessions
NUMLOGS="5"    			            # number of log sessions to save for later viewing
MAXLINES="200"			            # Maximum number of lines in a file to analyze
                                            # use caution in making it too large...
MAXSIZE="32767"			            # Maximum number of characters in any request to the chat bot
EOF

# now make link to app

	printf "\\nInstalling $PROGNAME in /opt/sbin\\n"
        if [ -d "/opt/sbin" ] && [ ! -L "/opt/sbin/$PROGNAME" ]; then
               	ln -s "$PROGDIR/$PROGNAME" "/opt/sbin/$PROGNAME"
             	chmod 0755 "/opt/sbin/$PROGNAME"
        fi

	LOGDIR="$SCRIPTDIR/logs"            # define for initial install
	mkdir -p $LOGDIR

	printf "\\n$SCRIPTDIR/$CONFIG created and $PROGNAME installed in /opt/sbin\\n"
	printf "Here is $SCRIPTDIR/$CONFIG:\\n\\n"
	cat $SCRIPTDIR/$CONFIG
	printf "\\n\\nBefore running $PROGNAME you will need to get a Google Gemini API key\\n"
	printf "from https://aistudio.google.com/app/apikey\\n"
	printf "or from Anthropic for Claude at https://docs.anthropic.com/en/api/getting-started\\n"
	printf " - or both if you want to use both\\n"
	printf "\\nOnce you get the key(s), edit $SCRIPTDIR/$CONFIG and change the\\n"
	printf "appropriate API_KEY line\\n\\n"
	printf "\\nInstall done.\\n"
	printf "\\nHave fun ;-)\\n"
	exit
}

douninstall() {
	if [ ! -x $PROGDIR/$PROGNAME ] || [ ! -d $SCRIPTDIR ]; then
		printf "\\n$PROGNAME doesn't seem to be installed\\n"
		exit
	fi

	source $SCRIPTDIR/$CONFIG

	printf "\\nUninstall $PROGNAME\\n"
	printf "\\nAre you sure you want to remove $PROGNAMEi, it's config file and chat logs (Y|N) ?"
	read -r answr
	case $answr in
		Y|y)
			printf "\\nUninstalling..."
			rm -rf $SCRIPTDIR
			rm -f $PROGDIR/$PROGNAME
                   	if [ -L /opt/sbin/$PROGNAME ]; then
				rm -f /opt/sbin/$PROGNAME
		   	fi
			printf "\\nSuccess - $PROGNAME uninstalled.\\n"
		;;
		N|n)
				printf "\\nok, exiting...\\n"
				exit 
		;;
		*)
				printf "Enter either Y or N...exiting\\n"
				exit
		;;
	esac
}

doupdate() {
	if [ -x "$PROGDIR/$PROGNAME" ] && [ -d "$SCRIPTDIR" ]; then

		curl --retry 3 --silent "https://raw.githubusercontent.com/JGrana01/chatai/master/SCRIPTVER" -o "$SCRIPTDIR/VERSION.new"
		
		if [ -z "$SCRIPTDIR/VERSION.new" ]; then
			echo "chatai: Could not retrieve version number from github. Exiting."
			exit
		fi

		oldwas=$(grep -m 1 "VERSION=" "$PROGDIR/$PROGNAME" | sed 's/readonly VERSION\=//g')
		newis=$(grep -m 1 "VERSION=" "$SCRIPTDIR/VERSION.new" | sed 's/VERSION\=//g')

		rm -f "$SCRIPTDIR/VERSION.new"

		if [ "$oldwas" = "$newis" ]; then
			printf "\\n\\chatai is up to date\\n\\n"
			exit
		fi

		printf "New version ($newis) of chatai found.\\n"
		printf "\\nDownload and install the latest version of chatai (Y/N)? "
		read a
		if [ "$a" = "n" ] || [ "$a" = "N" ]; then
			exit
		else
			printf "\\nOk, downloading chatai\\n"
			curl --retry 3 --silent "https://raw.githubusercontent.com/JGrana01/chatai/master/chatai" -o /jffs/scripts/chatai && chmod 0755 /jffs/scripts/chatai
		printf "\\n\\nDone.\\n"
			printf "\\nUpdated to version %s\\n\\n" $newis
			
		fi
	else
		printf "\\n\\n$PROGNAME doesnt appear to be installed!!!\\n"
	fi

}


# chkfile - make sure file exists, is less than MAXSIZE and MAXLINES and cleanup for JSON

chkfile() {

	if [ ! -f "$1" ]; then
		printf "Couldn't find file $1\\n"
		return
	fi

	setconfigs
	
	filesize=$(wc -c < "$1")

	if [ "$filesize" -gt "$MAXSIZE" ]; then
    		printf "File %s is too large (%d), needs to be smaller than %d bytes\n" "$1" "$filesize" "$MAXSIZE"
    		exit 1
	fi
	
	input="$(cat ${1})"
	lines=$(echo "$input" | wc -l)
	if [ "$lines" -gt "$MAXLINES" ]; then
		printf "$1 exceeds $MAXLINES lines. Its $lines lines long.\\n"
		printf "Take the last $MAXLINES lines and analyze? (Y|N)? "
		read a
		case $a in
			Y|y)
				echo "$input" | tail -n "$MAXLINES" > tmpin
				input="$(cat tmpin)"
				rm -f tmpin
			;;
			*)
				printf "\\nShorten the file and try again\\n"
				exit
			;;
		esac
	fi
}


# Function to call Google Gemini 

callgemini() {

# prepare text and send off...

  	printf "\\nWorking..."

    # Call GenAI API

    curl -sSX POST \
        -H 'Content-Type: application/json' \
        -H "x-goog-api-key: ${GAPI_KEY}" \
        -o "${AIRESP}" \
        -d '{
                "contents": [
                        {
                        "role": "user",
                        "parts": [
                                {
                                "text": "'"$question"'"
                                }
                        ]
                        }
                ]
                }' \
        "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent"

    	if [ ! -z $AIRESP ]; then
		if grep -q '"error":' $AIRESP; then
			output=$(jq -r '.error | "\(.message)"' $AIRESP)
	    		printf "\\r${ERROR} API Error ${CLEARFORMAT}\\n\\n"
		else
        		output=$(jq -r '.candidates[0].content.parts[0].text' $AIRESP)
		fi
    	else
        	output="Unable to get any answers from Google AI"
    	fi

    	printf "\\r${BOLDCYAN} %s ${CLEARFORMAT}\\n\\n" "$output" | fold -w 80 -s

	if [ $logchat = 1 ]; then
		printf "\\n%s\\n" "Gemini Q: $question" >> $logis
    		printf "\\r${BOLDCYAN} %s ${CLEARFORMAT}\\n\\n" "$output" >> $logis
	fi

}

callclaude() {

# prepare text and send off...

        printf "\\nWorking..."

    # Call Claude API

# Construct the JSON payload
JSON_PAYLOAD=$(cat <<EOF
{
  "model": "claude-3-sonnet-20240229",
  "max_tokens": 1024,
  "messages": [
    {
      "role": "user",
      "content": "${question}"
    }
  ]
}
EOF
)

# Send the request to the API

curl -sSX POST "https://api.anthropic.com/v1/messages" \
  -H "Content-Type: application/json" \
  -H "x-api-key: $CAPI_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -o "${AIRESP}" \
  -d "$JSON_PAYLOAD"

        if [ ! -z $AIRESP ]; then
		if grep -q '"error":' $AIRESP; then
			output=$(jq -r '.error | "\(.type): \(.message)"' $AIRESP)
	    		printf "\\r${ERROR} API Error ${CLEARFORMAT}\\n\\n"
		else
                	output=$(jq -r '.content[0].text' $AIRESP)
		fi
        else
                output="Unable to get any answers from Claude AI"
        fi

        printf "\\r${BOLDBLUE} %s ${CLEARFORMAT}\\n\\n" "$output" | fold -w 80 -s

        if [ $logchat = 1 ]; then
                printf "\\n%s\\n" "Claude Q: $question" >> $logis
                printf "\\r${BOLDBLUE} %s ${CLEARFORMAT}\\n\\n" "$output" >> $logis
        fi

}

# Function to start chat log
startchatlog() {

	if [ ! -d $LOGDIR ]; then   # make sure log directory exists - might have been changed
		mkdir -p $LOGDIR
	fi

	numberlogs=$(ls -l $LOGDIR | wc -l)
	if [ $numberlogs -ge $NUMLOGS ]; then
		rm $LOGDIR/$(ls -t $LOGDIR | tail -n 1) # keep only the last NUMLOGS
	fi
	timestamp=$(date '+%Y-%m-%d-%H-%M-%S')
	logis="$LOGDIR/chatlog_$timestamp"
	case $WHICHAI in
		0)
			printf "\\n chatai Gemini Chat Log: $timestamp\\n\\n" > $logis
		;;
		1)
			printf "\\n chatai Claude Chat Log: $timestamp\\n\\n" > $logis
		;;
		2)
			printf "\\n chatai Gemini and Claude Chat Log: $timestamp\\n\\n" > $logis
		;;
		*)
			printf "\\nSomeone is confused...\\n"
			exit
		;;
	esac

}

# Function to close chat log
closechatlog() {

	printf "\\n\\nEnd of Chat Log $timestamp\\n" >> $logis
	printf "\\n\\nChat log saved as $logis\\n"
}

showlogs() {

	source $SCRIPTDIR/$CONFIG
	numberlogs=$(ls -l $LOGDIR | wc -l)
	if [ $numberlogs = 0 ]; then
		printf "\\n\\nNo logs to show...\\n"
	else
		logs=$(ls -t "$LOGDIR")
		for log in $logs
		do
			printf "\\nLog file %s\\n" $LOGDIR/$log
			/bin/more $LOGDIR/$log
			printf "\\nPress Enter to continue..."
			read a
		done
	fi
}

analyzefile() {

	checkenv
	setconfigs

# cleanup special chars for JSON strings and call AI bot

	cleanfile=$(echo "$input" | sed 's/\"/\\"/g' | sed 's/$/\\n/g' | tr -d '\n')	# cleanup some JSON things...
	question="Please analyze this ${ftype} file: ${cleanfile}"
	case $WHICHAI in
		0)
			callgemini
		;;
		1)
			callclaude
		;;
		2)
			callgemini
			callclaude
		;;
		*)
			printf "\\nSomeone is confused...\\n"
			exit
		;;
	esac
}

doanalyze() {

	while true; do
		printf "\\nWhat type of file to analyze:\\n"
		printf " Makes for more accurate resul\\n"
		printf "  1) text\\n"
		printf "  2) code\\n"
		printf "  3) log\\n\\n"
		printf "(1 or 2 or 3) ? "
		read choice
		case $choice in
			1|text)
				ftype="text"
				break
			;;
			2|code)
				ftype="code"
				break
			;;
			3|log)
				ftype="log"
				break
			;;
			q)
				exit
			;;	
			*)
				printf "Either 1,2 or 3\\n"
			;;
		esac
	done
	printf "\\nFile: "
	read filename
	chkfile $filename
	analyzefile $ftype
}
		

dochat() {

	checkenv
	setconfigs

	case $WHICHAI in
		0)
			printf "\\n\\nGeminiAI Chat mode. Enter a line of text and get a response.\\n"
		;;
		1)
			printf "\\n\\nClaudeAI Chat mode. Enter a line of text and get a response.\\n"
		;;
		2)
			printf "\\n\\nBoth Gemini and Claude Chat mode.\\n"
			printf "${BOLDCYAN}Geminis response will be in Cyan ${CLEARFORMAT}and${BOLDBLUE} Claudes response in Blue ${CLEARFORMAT}.\\n"
			printf "Enter text and get both responses.\\n\\n"
		;;
		*)
			printf "\\nSomeone is confused...\\n"
			exit
		;;
	esac

	printf "    Enter "q" to exit this mode\\n\\n"

	while true; do
    		read -p "chat> " input
		if [[ "$input" == "q" ]]; then
        		echo "Exiting..."
        		break
		fi

    # Call AI API

		if [[ "$input" == "analyze" ]]; then
			doanalyze
		elif [ ! -z "$input" ]; then
			question=$(echo "$input" | sed 's/\"/\\"/g' | sed 's/$/\\n/g' | tr -d '\n')	# cleanup some JSON things...
			case $WHICHAI in
				0)
					callgemini
				;;
				1)
					callclaude 
				;;
				2)
					printf "${BOLD}Gemini\\n ${CLEARFORMAT}"
					callgemini
					printf "${BOLD}\\nClaude\\n ${CLEARFORMAT}"
					callclaude
				;;
				*)
					printf "\\nSomeone is confused...\\n"
					exit
				;;
			esac
		fi
	done
}

#
# Main Function to check for options and installed needed apps
#          and build the log file and response
doaichat() {

# look for any command line options

	if [ ! "$#" -eq 0 ]; then
		while [ "$#" -gt 0 ]; do
    			case $1 in
				install)
					doinstall
					exit
				;;
				uninstall)
					douninstall
					exit
				;;
				help)
					showhelp
					exit
				;;
				gemini)
					whichone=0
				;;
				claude)
					whichone=1
				;;
				both)
					whichone=2
				;;
				log)
					logchat=1
				;;
				show)
					showlogs
					exit
				;;
				analyze)
					analyze=1
					chkfile "$2"
					shift
				;;
				update)
					doupdate
					exit
				;;
				debug)
					debug=1
					printf "\\nDebug On\\n"
           			;;
				*)
	   				printf "\\nchatai: Invalid argument $1\\n"
					showhelp
	   				exit
           			;;
    			esac
    		shift
		done
	fi

# check environment and load confgis

	checkenv
	setconfigs

	if [ $analyze = 1 ]; then
		analyzefile "text"
		exit
	fi

	if [ $logchat = 1 ]; then
		startchatlog
	fi

	dochat

	if [ $logchat = 1 ]; then
		closechatlog
	fi

}

checkgeminikey() {
	if grep -q "PutYourGeminiAPIKeyHere" $SCRIPTDIR/$CONFIG; then
		printf "\\n Gemini API Key not detected in $SCRIPTDIR/$CONFIG\\n"
		printf "\\nGet a key from https://aistudio.google.com/app/apikey and add it\\n"
		printf "to $SCRIPTDIR/$CONFIG.\\n"
		printf "chatai: exiting\\n"
		exit
	fi
}

checkclaudekey() {
	if grep -q "PutYourClaudeAPIKeyHere" $SCRIPTDIR/$CONFIG; then
		printf "\\n Claude API Key not detected in $SCRIPTDIR/$CONFIG\\n"
		printf "\\nGet a key from https://docs.anthropic.com/en/api/getting-started and add it\\n"
		printf "to $SCRIPTDIR/$CONFIG.\\n"
		printf "chatai: exiting\\n"
		exit
	fi
}


checkenv() {

	if [ ! -f $SCRIPTDIR/$CONFIG ]; then
		printf "\\n$SCRIPTDIR/$CONFIG not detected, please run install\\n"
		exit
	fi

	case $WHICHAI in
		0)
			checkgeminikey
		;;
		1)
			checkclaudekey
		;;
		2)
			if grep -q "PutYour" $SCRIPTDIR/$CONFIG; then
				printf "\\n One or more of the API Keys not detected in $SCRIPTDIR/$CONFIG\\n"
				printf "\\nGet a key from https://aistudio.google.com/app/apikey and https://docs.anthropic.com/en/api/getting-started\\n"
				printf "and add them to $SCRIPTDIR/$CONFIG.\\n"
				printf "chatai: exiting\\n"
				exit
			fi
		;;
	esac


}

setconfigs() {

# ok, load config info

	source $SCRIPTDIR/$CONFIG

# override default AI bot if set in command line

	if [ "$whichone" != "9" ]; then
		WHICHAI="$whichone"
	fi


}

# remove temp files

cleanupfiles() {
	rm -f $AIRESP
}

# Main script

trap "rm -f $AIRESP" 0 1 2 5 15

doaichat "$@"

cleanupfiles

exit

